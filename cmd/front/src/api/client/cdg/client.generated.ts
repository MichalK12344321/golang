//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { ClientBase } from "./clientBase";import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export module CDG {

export interface IClient {
    /**
     * Get collection list
     * @param limit (optional) number of items to retrieve
     * @param cursor (optional) paging cursor
     * @param statuses (optional) status filter (comma separated)
     * @return Collections
     */
    getCollection(limit?: number | null | undefined, cursor?: string | null | undefined, statuses?: string | null | undefined): Promise<CollectionDto[]>;
    /**
     * Get run details
     * @param runId Run id
     * @return Run
     */
    getCollectionRunRunId(runId: string): Promise<RunDto>;
    /**
     * File
     * @param runId Run id
     * @return File contents
     */
    getCollectionRunRunIdArchive(runId: string): Promise<FileResponse>;
    /**
     * Get collection
     * @param id Id of the Collection
     * @return Collection
     */
    getCollectionId(id: string): Promise<CollectionDto>;
    /**
     * Get application status
     */
    getHealthz(): Promise<ValueObject>;
    /**
     * Get application version
     * @return Version number
     */
    getVersion(): Promise<ValueObject>;
}

export class Client extends ClientBase implements IClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        super();

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * Get collection list
     * @param limit (optional) number of items to retrieve
     * @param cursor (optional) paging cursor
     * @param statuses (optional) status filter (comma separated)
     * @return Collections
     */
    getCollection(limit?: number | null | undefined, cursor?: string | null | undefined, statuses?: string | null | undefined, cancelToken?: CancelToken): Promise<CollectionDto[]> {
        let url_ = this.baseUrl + "/collection?";
        if (limit !== undefined && limit !== null)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (cursor !== undefined && cursor !== null)
            url_ += "cursor=" + encodeURIComponent("" + cursor) + "&";
        if (statuses !== undefined && statuses !== null)
            url_ += "statuses=" + encodeURIComponent("" + statuses) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCollection(_response);
        });
    }

    protected processGetCollection(response: AxiosResponse): Promise<CollectionDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<CollectionDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Failure response", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CollectionDto[]>(null as any);
    }

    /**
     * Get run details
     * @param runId Run id
     * @return Run
     */
    getCollectionRunRunId(runId: string, cancelToken?: CancelToken): Promise<RunDto> {
        let url_ = this.baseUrl + "/collection/run/{runId}";
        if (runId === undefined || runId === null)
            throw new Error("The parameter 'runId' must be defined.");
        url_ = url_.replace("{runId}", encodeURIComponent("" + runId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCollectionRunRunId(_response);
        });
    }

    protected processGetCollectionRunRunId(response: AxiosResponse): Promise<RunDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<RunDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Failure response", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RunDto>(null as any);
    }

    /**
     * File
     * @param runId Run id
     * @return File contents
     */
    getCollectionRunRunIdArchive(runId: string, cancelToken?: CancelToken): Promise<FileResponse> {
        let url_ = this.baseUrl + "/collection/run/{runId}/archive";
        if (runId === undefined || runId === null)
            throw new Error("The parameter 'runId' must be defined.");
        url_ = url_.replace("{runId}", encodeURIComponent("" + runId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            responseType: "blob",
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCollectionRunRunIdArchive(_response);
        });
    }

    protected processGetCollectionRunRunIdArchive(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Failure response", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    /**
     * Get collection
     * @param id Id of the Collection
     * @return Collection
     */
    getCollectionId(id: string, cancelToken?: CancelToken): Promise<CollectionDto> {
        let url_ = this.baseUrl + "/collection/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCollectionId(_response);
        });
    }

    protected processGetCollectionId(response: AxiosResponse): Promise<CollectionDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<CollectionDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Failure response", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CollectionDto>(null as any);
    }

    /**
     * Get application status
     */
    getHealthz( cancelToken?: CancelToken): Promise<ValueObject> {
        let url_ = this.baseUrl + "/healthz";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetHealthz(_response);
        });
    }

    protected processGetHealthz(response: AxiosResponse): Promise<ValueObject> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ValueObject>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ValueObject>(null as any);
    }

    /**
     * Get application version
     * @return Version number
     */
    getVersion( cancelToken?: CancelToken): Promise<ValueObject> {
        let url_ = this.baseUrl + "/version";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetVersion(_response);
        });
    }

    protected processGetVersion(response: AxiosResponse): Promise<ValueObject> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ValueObject>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ValueObject>(null as any);
    }
}

export interface ValueObject {
    value?: string | undefined;
}

export interface CollectionDto {
    collectionId?: string | undefined;
    go?: GoInfo | undefined;
    runs?: RunDto[] | undefined;
    ssh?: SSHInfo | undefined;
    type?: string | undefined;
}

export interface RunDto {
    collectionId?: string | undefined;
    error?: string | undefined;
    runId?: string | undefined;
    status?: string | undefined;
}

export interface GoInfo {
    script?: string | undefined;
    timeout?: number | undefined;
}

export interface SSHInfo {
    host?: string | undefined;
    password?: string | undefined;
    port?: number | undefined;
    script?: string | undefined;
    timeout?: number | undefined;
    user?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

ClientBase;
}