//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { ClientBase } from "./clientBase";import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export module SCHEDULER {

export interface IClient {
    /**
     * Get application status
     */
    getHealthz(): Promise<ValueObject>;
    /**
     * Schedule Go collection
     * @param body Request
     * @return Response
     */
    postScheduleGo(body: ScheduleGoCollectionDto): Promise<ScheduleResponseDto>;
    /**
     * Schedule SSH collection
     * @param body Request
     * @return Response
     */
    postScheduleSsh(body: ScheduleSSHCollectionDto): Promise<ScheduleResponseDto>;
    /**
     * Terminate log collection
     * @param body Terminate request
     * @return Response
     */
    postTerminate(body: TerminateRequestDto): Promise<TerminateResponseDto>;
    /**
     * Get application version
     * @return Version number
     */
    getVersion(): Promise<ValueObject>;
}

export class Client extends ClientBase implements IClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        super();

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * Get application status
     */
    getHealthz( cancelToken?: CancelToken): Promise<ValueObject> {
        let url_ = this.baseUrl + "/healthz";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetHealthz(_response);
        });
    }

    protected processGetHealthz(response: AxiosResponse): Promise<ValueObject> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ValueObject>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ValueObject>(null as any);
    }

    /**
     * Schedule Go collection
     * @param body Request
     * @return Response
     */
    postScheduleGo(body: ScheduleGoCollectionDto, cancelToken?: CancelToken): Promise<ScheduleResponseDto> {
        let url_ = this.baseUrl + "/schedule/go";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPostScheduleGo(_response);
        });
    }

    protected processPostScheduleGo(response: AxiosResponse): Promise<ScheduleResponseDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ScheduleResponseDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Failure response", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ScheduleResponseDto>(null as any);
    }

    /**
     * Schedule SSH collection
     * @param body Request
     * @return Response
     */
    postScheduleSsh(body: ScheduleSSHCollectionDto, cancelToken?: CancelToken): Promise<ScheduleResponseDto> {
        let url_ = this.baseUrl + "/schedule/ssh";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPostScheduleSsh(_response);
        });
    }

    protected processPostScheduleSsh(response: AxiosResponse): Promise<ScheduleResponseDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ScheduleResponseDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Failure response", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ScheduleResponseDto>(null as any);
    }

    /**
     * Terminate log collection
     * @param body Terminate request
     * @return Response
     */
    postTerminate(body: TerminateRequestDto, cancelToken?: CancelToken): Promise<TerminateResponseDto> {
        let url_ = this.baseUrl + "/terminate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPostTerminate(_response);
        });
    }

    protected processPostTerminate(response: AxiosResponse): Promise<TerminateResponseDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<TerminateResponseDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Failure response", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TerminateResponseDto>(null as any);
    }

    /**
     * Get application version
     * @return Version number
     */
    getVersion( cancelToken?: CancelToken): Promise<ValueObject> {
        let url_ = this.baseUrl + "/version";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetVersion(_response);
        });
    }

    protected processGetVersion(response: AxiosResponse): Promise<ValueObject> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ValueObject>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ValueObject>(null as any);
    }
}

export interface ValueObject {
    value?: string | undefined;
}

export interface RunScheduleDto {
    collectionId?: string | undefined;
    runId?: string | undefined;
}

export interface ScheduleGoCollectionDto {
    /** cron for repeat collection - leave empty if one off */
    cron?: string | undefined;
    repeat?: boolean | undefined;
    script: string;
    timeout: string;
}

export interface ScheduleResponseDto {
    runs: RunScheduleDto[];
}

export interface ScheduleSSHCollectionDto {
    /** cron for repeat collection - leave empty if one off */
    cron?: string | undefined;
    repeat?: boolean | undefined;
    script: string;
    targets: TargetDto[];
    timeout: string;
}

export interface TargetDto {
    host: string;
    password: string;
    port: number;
    user: string;
}

export interface TerminateRequestDto {
    runId: string;
}

export interface TerminateResponseDto {
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

ClientBase;
}