// Code generated by counterfeiter. DO NOT EDIT.
package databasefakes

import (
	"lca/internal/app/cdg/database"
	"sync"

	"gorm.io/gorm"
)

type FakeDataContext struct {
	DatabaseStub        func() *gorm.DB
	databaseMutex       sync.RWMutex
	databaseArgsForCall []struct {
	}
	databaseReturns struct {
		result1 *gorm.DB
	}
	databaseReturnsOnCall map[int]struct {
		result1 *gorm.DB
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDataContext) Database() *gorm.DB {
	fake.databaseMutex.Lock()
	ret, specificReturn := fake.databaseReturnsOnCall[len(fake.databaseArgsForCall)]
	fake.databaseArgsForCall = append(fake.databaseArgsForCall, struct {
	}{})
	stub := fake.DatabaseStub
	fakeReturns := fake.databaseReturns
	fake.recordInvocation("Database", []interface{}{})
	fake.databaseMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDataContext) DatabaseCallCount() int {
	fake.databaseMutex.RLock()
	defer fake.databaseMutex.RUnlock()
	return len(fake.databaseArgsForCall)
}

func (fake *FakeDataContext) DatabaseCalls(stub func() *gorm.DB) {
	fake.databaseMutex.Lock()
	defer fake.databaseMutex.Unlock()
	fake.DatabaseStub = stub
}

func (fake *FakeDataContext) DatabaseReturns(result1 *gorm.DB) {
	fake.databaseMutex.Lock()
	defer fake.databaseMutex.Unlock()
	fake.DatabaseStub = nil
	fake.databaseReturns = struct {
		result1 *gorm.DB
	}{result1}
}

func (fake *FakeDataContext) DatabaseReturnsOnCall(i int, result1 *gorm.DB) {
	fake.databaseMutex.Lock()
	defer fake.databaseMutex.Unlock()
	fake.DatabaseStub = nil
	if fake.databaseReturnsOnCall == nil {
		fake.databaseReturnsOnCall = make(map[int]struct {
			result1 *gorm.DB
		})
	}
	fake.databaseReturnsOnCall[i] = struct {
		result1 *gorm.DB
	}{result1}
}

func (fake *FakeDataContext) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.databaseMutex.RLock()
	defer fake.databaseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDataContext) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ database.DataContext = new(FakeDataContext)
