// Code generated by counterfeiter. DO NOT EDIT.
package cdgfakes

import (
	"lca/internal/app/cdg"
	"lca/internal/pkg/dto"
	"sync"

	"github.com/google/uuid"
)

type FakeLogCollectionRepository struct {
	GetStub        func(uuid.UUID) (*dto.CollectionDto, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 uuid.UUID
	}
	getReturns struct {
		result1 *dto.CollectionDto
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *dto.CollectionDto
		result2 error
	}
	GetManyStub        func(dto.GetCollectionFilterDto) ([]*dto.CollectionDto, error)
	getManyMutex       sync.RWMutex
	getManyArgsForCall []struct {
		arg1 dto.GetCollectionFilterDto
	}
	getManyReturns struct {
		result1 []*dto.CollectionDto
		result2 error
	}
	getManyReturnsOnCall map[int]struct {
		result1 []*dto.CollectionDto
		result2 error
	}
	InsertStub        func(*dto.CollectionDto) error
	insertMutex       sync.RWMutex
	insertArgsForCall []struct {
		arg1 *dto.CollectionDto
	}
	insertReturns struct {
		result1 error
	}
	insertReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateStub        func(*dto.CollectionDto) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 *dto.CollectionDto
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLogCollectionRepository) Get(arg1 uuid.UUID) (*dto.CollectionDto, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 uuid.UUID
	}{arg1})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLogCollectionRepository) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeLogCollectionRepository) GetCalls(stub func(uuid.UUID) (*dto.CollectionDto, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeLogCollectionRepository) GetArgsForCall(i int) uuid.UUID {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLogCollectionRepository) GetReturns(result1 *dto.CollectionDto, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *dto.CollectionDto
		result2 error
	}{result1, result2}
}

func (fake *FakeLogCollectionRepository) GetReturnsOnCall(i int, result1 *dto.CollectionDto, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *dto.CollectionDto
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *dto.CollectionDto
		result2 error
	}{result1, result2}
}

func (fake *FakeLogCollectionRepository) GetMany(arg1 dto.GetCollectionFilterDto) ([]*dto.CollectionDto, error) {
	fake.getManyMutex.Lock()
	ret, specificReturn := fake.getManyReturnsOnCall[len(fake.getManyArgsForCall)]
	fake.getManyArgsForCall = append(fake.getManyArgsForCall, struct {
		arg1 dto.GetCollectionFilterDto
	}{arg1})
	stub := fake.GetManyStub
	fakeReturns := fake.getManyReturns
	fake.recordInvocation("GetMany", []interface{}{arg1})
	fake.getManyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLogCollectionRepository) GetManyCallCount() int {
	fake.getManyMutex.RLock()
	defer fake.getManyMutex.RUnlock()
	return len(fake.getManyArgsForCall)
}

func (fake *FakeLogCollectionRepository) GetManyCalls(stub func(dto.GetCollectionFilterDto) ([]*dto.CollectionDto, error)) {
	fake.getManyMutex.Lock()
	defer fake.getManyMutex.Unlock()
	fake.GetManyStub = stub
}

func (fake *FakeLogCollectionRepository) GetManyArgsForCall(i int) dto.GetCollectionFilterDto {
	fake.getManyMutex.RLock()
	defer fake.getManyMutex.RUnlock()
	argsForCall := fake.getManyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLogCollectionRepository) GetManyReturns(result1 []*dto.CollectionDto, result2 error) {
	fake.getManyMutex.Lock()
	defer fake.getManyMutex.Unlock()
	fake.GetManyStub = nil
	fake.getManyReturns = struct {
		result1 []*dto.CollectionDto
		result2 error
	}{result1, result2}
}

func (fake *FakeLogCollectionRepository) GetManyReturnsOnCall(i int, result1 []*dto.CollectionDto, result2 error) {
	fake.getManyMutex.Lock()
	defer fake.getManyMutex.Unlock()
	fake.GetManyStub = nil
	if fake.getManyReturnsOnCall == nil {
		fake.getManyReturnsOnCall = make(map[int]struct {
			result1 []*dto.CollectionDto
			result2 error
		})
	}
	fake.getManyReturnsOnCall[i] = struct {
		result1 []*dto.CollectionDto
		result2 error
	}{result1, result2}
}

func (fake *FakeLogCollectionRepository) Insert(arg1 *dto.CollectionDto) error {
	fake.insertMutex.Lock()
	ret, specificReturn := fake.insertReturnsOnCall[len(fake.insertArgsForCall)]
	fake.insertArgsForCall = append(fake.insertArgsForCall, struct {
		arg1 *dto.CollectionDto
	}{arg1})
	stub := fake.InsertStub
	fakeReturns := fake.insertReturns
	fake.recordInvocation("Insert", []interface{}{arg1})
	fake.insertMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLogCollectionRepository) InsertCallCount() int {
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	return len(fake.insertArgsForCall)
}

func (fake *FakeLogCollectionRepository) InsertCalls(stub func(*dto.CollectionDto) error) {
	fake.insertMutex.Lock()
	defer fake.insertMutex.Unlock()
	fake.InsertStub = stub
}

func (fake *FakeLogCollectionRepository) InsertArgsForCall(i int) *dto.CollectionDto {
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	argsForCall := fake.insertArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLogCollectionRepository) InsertReturns(result1 error) {
	fake.insertMutex.Lock()
	defer fake.insertMutex.Unlock()
	fake.InsertStub = nil
	fake.insertReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLogCollectionRepository) InsertReturnsOnCall(i int, result1 error) {
	fake.insertMutex.Lock()
	defer fake.insertMutex.Unlock()
	fake.InsertStub = nil
	if fake.insertReturnsOnCall == nil {
		fake.insertReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.insertReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLogCollectionRepository) Update(arg1 *dto.CollectionDto) error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 *dto.CollectionDto
	}{arg1})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLogCollectionRepository) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeLogCollectionRepository) UpdateCalls(stub func(*dto.CollectionDto) error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeLogCollectionRepository) UpdateArgsForCall(i int) *dto.CollectionDto {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLogCollectionRepository) UpdateReturns(result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLogCollectionRepository) UpdateReturnsOnCall(i int, result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLogCollectionRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.getManyMutex.RLock()
	defer fake.getManyMutex.RUnlock()
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLogCollectionRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cdg.LogCollectionRepository = new(FakeLogCollectionRepository)
