// Code generated by counterfeiter. DO NOT EDIT.
package collectorfakes

import (
	"lca/internal/app/collector"
	"sync"

	"github.com/google/uuid"
)

type FakeJob struct {
	IdStub        func() uuid.UUID
	idMutex       sync.RWMutex
	idArgsForCall []struct {
	}
	idReturns struct {
		result1 uuid.UUID
	}
	idReturnsOnCall map[int]struct {
		result1 uuid.UUID
	}
	JobDataStub        func() collector.JobData
	jobDataMutex       sync.RWMutex
	jobDataArgsForCall []struct {
	}
	jobDataReturns struct {
		result1 collector.JobData
	}
	jobDataReturnsOnCall map[int]struct {
		result1 collector.JobData
	}
	RunStub        func() []error
	runMutex       sync.RWMutex
	runArgsForCall []struct {
	}
	runReturns struct {
		result1 []error
	}
	runReturnsOnCall map[int]struct {
		result1 []error
	}
	TerminateStub        func() error
	terminateMutex       sync.RWMutex
	terminateArgsForCall []struct {
	}
	terminateReturns struct {
		result1 error
	}
	terminateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeJob) Id() uuid.UUID {
	fake.idMutex.Lock()
	ret, specificReturn := fake.idReturnsOnCall[len(fake.idArgsForCall)]
	fake.idArgsForCall = append(fake.idArgsForCall, struct {
	}{})
	stub := fake.IdStub
	fakeReturns := fake.idReturns
	fake.recordInvocation("Id", []interface{}{})
	fake.idMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeJob) IdCallCount() int {
	fake.idMutex.RLock()
	defer fake.idMutex.RUnlock()
	return len(fake.idArgsForCall)
}

func (fake *FakeJob) IdCalls(stub func() uuid.UUID) {
	fake.idMutex.Lock()
	defer fake.idMutex.Unlock()
	fake.IdStub = stub
}

func (fake *FakeJob) IdReturns(result1 uuid.UUID) {
	fake.idMutex.Lock()
	defer fake.idMutex.Unlock()
	fake.IdStub = nil
	fake.idReturns = struct {
		result1 uuid.UUID
	}{result1}
}

func (fake *FakeJob) IdReturnsOnCall(i int, result1 uuid.UUID) {
	fake.idMutex.Lock()
	defer fake.idMutex.Unlock()
	fake.IdStub = nil
	if fake.idReturnsOnCall == nil {
		fake.idReturnsOnCall = make(map[int]struct {
			result1 uuid.UUID
		})
	}
	fake.idReturnsOnCall[i] = struct {
		result1 uuid.UUID
	}{result1}
}

func (fake *FakeJob) JobData() collector.JobData {
	fake.jobDataMutex.Lock()
	ret, specificReturn := fake.jobDataReturnsOnCall[len(fake.jobDataArgsForCall)]
	fake.jobDataArgsForCall = append(fake.jobDataArgsForCall, struct {
	}{})
	stub := fake.JobDataStub
	fakeReturns := fake.jobDataReturns
	fake.recordInvocation("JobData", []interface{}{})
	fake.jobDataMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeJob) JobDataCallCount() int {
	fake.jobDataMutex.RLock()
	defer fake.jobDataMutex.RUnlock()
	return len(fake.jobDataArgsForCall)
}

func (fake *FakeJob) JobDataCalls(stub func() collector.JobData) {
	fake.jobDataMutex.Lock()
	defer fake.jobDataMutex.Unlock()
	fake.JobDataStub = stub
}

func (fake *FakeJob) JobDataReturns(result1 collector.JobData) {
	fake.jobDataMutex.Lock()
	defer fake.jobDataMutex.Unlock()
	fake.JobDataStub = nil
	fake.jobDataReturns = struct {
		result1 collector.JobData
	}{result1}
}

func (fake *FakeJob) JobDataReturnsOnCall(i int, result1 collector.JobData) {
	fake.jobDataMutex.Lock()
	defer fake.jobDataMutex.Unlock()
	fake.JobDataStub = nil
	if fake.jobDataReturnsOnCall == nil {
		fake.jobDataReturnsOnCall = make(map[int]struct {
			result1 collector.JobData
		})
	}
	fake.jobDataReturnsOnCall[i] = struct {
		result1 collector.JobData
	}{result1}
}

func (fake *FakeJob) Run() []error {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
	}{})
	stub := fake.RunStub
	fakeReturns := fake.runReturns
	fake.recordInvocation("Run", []interface{}{})
	fake.runMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeJob) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeJob) RunCalls(stub func() []error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = stub
}

func (fake *FakeJob) RunReturns(result1 []error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 []error
	}{result1}
}

func (fake *FakeJob) RunReturnsOnCall(i int, result1 []error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 []error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 []error
	}{result1}
}

func (fake *FakeJob) Terminate() error {
	fake.terminateMutex.Lock()
	ret, specificReturn := fake.terminateReturnsOnCall[len(fake.terminateArgsForCall)]
	fake.terminateArgsForCall = append(fake.terminateArgsForCall, struct {
	}{})
	stub := fake.TerminateStub
	fakeReturns := fake.terminateReturns
	fake.recordInvocation("Terminate", []interface{}{})
	fake.terminateMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeJob) TerminateCallCount() int {
	fake.terminateMutex.RLock()
	defer fake.terminateMutex.RUnlock()
	return len(fake.terminateArgsForCall)
}

func (fake *FakeJob) TerminateCalls(stub func() error) {
	fake.terminateMutex.Lock()
	defer fake.terminateMutex.Unlock()
	fake.TerminateStub = stub
}

func (fake *FakeJob) TerminateReturns(result1 error) {
	fake.terminateMutex.Lock()
	defer fake.terminateMutex.Unlock()
	fake.TerminateStub = nil
	fake.terminateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeJob) TerminateReturnsOnCall(i int, result1 error) {
	fake.terminateMutex.Lock()
	defer fake.terminateMutex.Unlock()
	fake.TerminateStub = nil
	if fake.terminateReturnsOnCall == nil {
		fake.terminateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.terminateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeJob) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.idMutex.RLock()
	defer fake.idMutex.RUnlock()
	fake.jobDataMutex.RLock()
	defer fake.jobDataMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.terminateMutex.RLock()
	defer fake.terminateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeJob) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ collector.Job = new(FakeJob)
