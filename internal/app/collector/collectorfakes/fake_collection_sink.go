// Code generated by counterfeiter. DO NOT EDIT.
package collectorfakes

import (
	"lca/internal/app/collector"
	"sync"
)

type FakeCollectionSink struct {
	AppendStderrStub        func([]byte)
	appendStderrMutex       sync.RWMutex
	appendStderrArgsForCall []struct {
		arg1 []byte
	}
	AppendStdoutStub        func([]byte)
	appendStdoutMutex       sync.RWMutex
	appendStdoutArgsForCall []struct {
		arg1 []byte
	}
	FinalizeStub        func() error
	finalizeMutex       sync.RWMutex
	finalizeArgsForCall []struct {
	}
	finalizeReturns struct {
		result1 error
	}
	finalizeReturnsOnCall map[int]struct {
		result1 error
	}
	InitializeStub        func() error
	initializeMutex       sync.RWMutex
	initializeArgsForCall []struct {
	}
	initializeReturns struct {
		result1 error
	}
	initializeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCollectionSink) AppendStderr(arg1 []byte) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.appendStderrMutex.Lock()
	fake.appendStderrArgsForCall = append(fake.appendStderrArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.AppendStderrStub
	fake.recordInvocation("AppendStderr", []interface{}{arg1Copy})
	fake.appendStderrMutex.Unlock()
	if stub != nil {
		fake.AppendStderrStub(arg1)
	}
}

func (fake *FakeCollectionSink) AppendStderrCallCount() int {
	fake.appendStderrMutex.RLock()
	defer fake.appendStderrMutex.RUnlock()
	return len(fake.appendStderrArgsForCall)
}

func (fake *FakeCollectionSink) AppendStderrCalls(stub func([]byte)) {
	fake.appendStderrMutex.Lock()
	defer fake.appendStderrMutex.Unlock()
	fake.AppendStderrStub = stub
}

func (fake *FakeCollectionSink) AppendStderrArgsForCall(i int) []byte {
	fake.appendStderrMutex.RLock()
	defer fake.appendStderrMutex.RUnlock()
	argsForCall := fake.appendStderrArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCollectionSink) AppendStdout(arg1 []byte) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.appendStdoutMutex.Lock()
	fake.appendStdoutArgsForCall = append(fake.appendStdoutArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.AppendStdoutStub
	fake.recordInvocation("AppendStdout", []interface{}{arg1Copy})
	fake.appendStdoutMutex.Unlock()
	if stub != nil {
		fake.AppendStdoutStub(arg1)
	}
}

func (fake *FakeCollectionSink) AppendStdoutCallCount() int {
	fake.appendStdoutMutex.RLock()
	defer fake.appendStdoutMutex.RUnlock()
	return len(fake.appendStdoutArgsForCall)
}

func (fake *FakeCollectionSink) AppendStdoutCalls(stub func([]byte)) {
	fake.appendStdoutMutex.Lock()
	defer fake.appendStdoutMutex.Unlock()
	fake.AppendStdoutStub = stub
}

func (fake *FakeCollectionSink) AppendStdoutArgsForCall(i int) []byte {
	fake.appendStdoutMutex.RLock()
	defer fake.appendStdoutMutex.RUnlock()
	argsForCall := fake.appendStdoutArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCollectionSink) Finalize() error {
	fake.finalizeMutex.Lock()
	ret, specificReturn := fake.finalizeReturnsOnCall[len(fake.finalizeArgsForCall)]
	fake.finalizeArgsForCall = append(fake.finalizeArgsForCall, struct {
	}{})
	stub := fake.FinalizeStub
	fakeReturns := fake.finalizeReturns
	fake.recordInvocation("Finalize", []interface{}{})
	fake.finalizeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCollectionSink) FinalizeCallCount() int {
	fake.finalizeMutex.RLock()
	defer fake.finalizeMutex.RUnlock()
	return len(fake.finalizeArgsForCall)
}

func (fake *FakeCollectionSink) FinalizeCalls(stub func() error) {
	fake.finalizeMutex.Lock()
	defer fake.finalizeMutex.Unlock()
	fake.FinalizeStub = stub
}

func (fake *FakeCollectionSink) FinalizeReturns(result1 error) {
	fake.finalizeMutex.Lock()
	defer fake.finalizeMutex.Unlock()
	fake.FinalizeStub = nil
	fake.finalizeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCollectionSink) FinalizeReturnsOnCall(i int, result1 error) {
	fake.finalizeMutex.Lock()
	defer fake.finalizeMutex.Unlock()
	fake.FinalizeStub = nil
	if fake.finalizeReturnsOnCall == nil {
		fake.finalizeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.finalizeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCollectionSink) Initialize() error {
	fake.initializeMutex.Lock()
	ret, specificReturn := fake.initializeReturnsOnCall[len(fake.initializeArgsForCall)]
	fake.initializeArgsForCall = append(fake.initializeArgsForCall, struct {
	}{})
	stub := fake.InitializeStub
	fakeReturns := fake.initializeReturns
	fake.recordInvocation("Initialize", []interface{}{})
	fake.initializeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCollectionSink) InitializeCallCount() int {
	fake.initializeMutex.RLock()
	defer fake.initializeMutex.RUnlock()
	return len(fake.initializeArgsForCall)
}

func (fake *FakeCollectionSink) InitializeCalls(stub func() error) {
	fake.initializeMutex.Lock()
	defer fake.initializeMutex.Unlock()
	fake.InitializeStub = stub
}

func (fake *FakeCollectionSink) InitializeReturns(result1 error) {
	fake.initializeMutex.Lock()
	defer fake.initializeMutex.Unlock()
	fake.InitializeStub = nil
	fake.initializeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCollectionSink) InitializeReturnsOnCall(i int, result1 error) {
	fake.initializeMutex.Lock()
	defer fake.initializeMutex.Unlock()
	fake.InitializeStub = nil
	if fake.initializeReturnsOnCall == nil {
		fake.initializeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.initializeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCollectionSink) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.appendStderrMutex.RLock()
	defer fake.appendStderrMutex.RUnlock()
	fake.appendStdoutMutex.RLock()
	defer fake.appendStdoutMutex.RUnlock()
	fake.finalizeMutex.RLock()
	defer fake.finalizeMutex.RUnlock()
	fake.initializeMutex.RLock()
	defer fake.initializeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCollectionSink) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ collector.CollectionSink = new(FakeCollectionSink)
