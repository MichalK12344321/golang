// Code generated by counterfeiter. DO NOT EDIT.
package collectorfakes

import (
	"lca/internal/app/collector"
	"sync"

	"github.com/google/uuid"
)

type FakeRepository struct {
	GetEventStub        func(any, uuid.UUID) (*collector.Event, error)
	getEventMutex       sync.RWMutex
	getEventArgsForCall []struct {
		arg1 any
		arg2 uuid.UUID
	}
	getEventReturns struct {
		result1 *collector.Event
		result2 error
	}
	getEventReturnsOnCall map[int]struct {
		result1 *collector.Event
		result2 error
	}
	SaveEventStub        func(any, uuid.UUID) error
	saveEventMutex       sync.RWMutex
	saveEventArgsForCall []struct {
		arg1 any
		arg2 uuid.UUID
	}
	saveEventReturns struct {
		result1 error
	}
	saveEventReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepository) GetEvent(arg1 any, arg2 uuid.UUID) (*collector.Event, error) {
	fake.getEventMutex.Lock()
	ret, specificReturn := fake.getEventReturnsOnCall[len(fake.getEventArgsForCall)]
	fake.getEventArgsForCall = append(fake.getEventArgsForCall, struct {
		arg1 any
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.GetEventStub
	fakeReturns := fake.getEventReturns
	fake.recordInvocation("GetEvent", []interface{}{arg1, arg2})
	fake.getEventMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRepository) GetEventCallCount() int {
	fake.getEventMutex.RLock()
	defer fake.getEventMutex.RUnlock()
	return len(fake.getEventArgsForCall)
}

func (fake *FakeRepository) GetEventCalls(stub func(any, uuid.UUID) (*collector.Event, error)) {
	fake.getEventMutex.Lock()
	defer fake.getEventMutex.Unlock()
	fake.GetEventStub = stub
}

func (fake *FakeRepository) GetEventArgsForCall(i int) (any, uuid.UUID) {
	fake.getEventMutex.RLock()
	defer fake.getEventMutex.RUnlock()
	argsForCall := fake.getEventArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRepository) GetEventReturns(result1 *collector.Event, result2 error) {
	fake.getEventMutex.Lock()
	defer fake.getEventMutex.Unlock()
	fake.GetEventStub = nil
	fake.getEventReturns = struct {
		result1 *collector.Event
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) GetEventReturnsOnCall(i int, result1 *collector.Event, result2 error) {
	fake.getEventMutex.Lock()
	defer fake.getEventMutex.Unlock()
	fake.GetEventStub = nil
	if fake.getEventReturnsOnCall == nil {
		fake.getEventReturnsOnCall = make(map[int]struct {
			result1 *collector.Event
			result2 error
		})
	}
	fake.getEventReturnsOnCall[i] = struct {
		result1 *collector.Event
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) SaveEvent(arg1 any, arg2 uuid.UUID) error {
	fake.saveEventMutex.Lock()
	ret, specificReturn := fake.saveEventReturnsOnCall[len(fake.saveEventArgsForCall)]
	fake.saveEventArgsForCall = append(fake.saveEventArgsForCall, struct {
		arg1 any
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.SaveEventStub
	fakeReturns := fake.saveEventReturns
	fake.recordInvocation("SaveEvent", []interface{}{arg1, arg2})
	fake.saveEventMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRepository) SaveEventCallCount() int {
	fake.saveEventMutex.RLock()
	defer fake.saveEventMutex.RUnlock()
	return len(fake.saveEventArgsForCall)
}

func (fake *FakeRepository) SaveEventCalls(stub func(any, uuid.UUID) error) {
	fake.saveEventMutex.Lock()
	defer fake.saveEventMutex.Unlock()
	fake.SaveEventStub = stub
}

func (fake *FakeRepository) SaveEventArgsForCall(i int) (any, uuid.UUID) {
	fake.saveEventMutex.RLock()
	defer fake.saveEventMutex.RUnlock()
	argsForCall := fake.saveEventArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRepository) SaveEventReturns(result1 error) {
	fake.saveEventMutex.Lock()
	defer fake.saveEventMutex.Unlock()
	fake.SaveEventStub = nil
	fake.saveEventReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) SaveEventReturnsOnCall(i int, result1 error) {
	fake.saveEventMutex.Lock()
	defer fake.saveEventMutex.Unlock()
	fake.SaveEventStub = nil
	if fake.saveEventReturnsOnCall == nil {
		fake.saveEventReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveEventReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getEventMutex.RLock()
	defer fake.getEventMutex.RUnlock()
	fake.saveEventMutex.RLock()
	defer fake.saveEventMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ collector.Repository = new(FakeRepository)
