// Code generated by counterfeiter. DO NOT EDIT.
package collectorfakes

import (
	"context"
	"lca/internal/app/collector"
	"lca/internal/pkg/events"
	"sync"
)

type FakeCollectionSinkFactory struct {
	NewStub        func(context.Context, *events.RunCreateEvent, collector.JobData) []collector.CollectionSink
	newMutex       sync.RWMutex
	newArgsForCall []struct {
		arg1 context.Context
		arg2 *events.RunCreateEvent
		arg3 collector.JobData
	}
	newReturns struct {
		result1 []collector.CollectionSink
	}
	newReturnsOnCall map[int]struct {
		result1 []collector.CollectionSink
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCollectionSinkFactory) New(arg1 context.Context, arg2 *events.RunCreateEvent, arg3 collector.JobData) []collector.CollectionSink {
	fake.newMutex.Lock()
	ret, specificReturn := fake.newReturnsOnCall[len(fake.newArgsForCall)]
	fake.newArgsForCall = append(fake.newArgsForCall, struct {
		arg1 context.Context
		arg2 *events.RunCreateEvent
		arg3 collector.JobData
	}{arg1, arg2, arg3})
	stub := fake.NewStub
	fakeReturns := fake.newReturns
	fake.recordInvocation("New", []interface{}{arg1, arg2, arg3})
	fake.newMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCollectionSinkFactory) NewCallCount() int {
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	return len(fake.newArgsForCall)
}

func (fake *FakeCollectionSinkFactory) NewCalls(stub func(context.Context, *events.RunCreateEvent, collector.JobData) []collector.CollectionSink) {
	fake.newMutex.Lock()
	defer fake.newMutex.Unlock()
	fake.NewStub = stub
}

func (fake *FakeCollectionSinkFactory) NewArgsForCall(i int) (context.Context, *events.RunCreateEvent, collector.JobData) {
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	argsForCall := fake.newArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCollectionSinkFactory) NewReturns(result1 []collector.CollectionSink) {
	fake.newMutex.Lock()
	defer fake.newMutex.Unlock()
	fake.NewStub = nil
	fake.newReturns = struct {
		result1 []collector.CollectionSink
	}{result1}
}

func (fake *FakeCollectionSinkFactory) NewReturnsOnCall(i int, result1 []collector.CollectionSink) {
	fake.newMutex.Lock()
	defer fake.newMutex.Unlock()
	fake.NewStub = nil
	if fake.newReturnsOnCall == nil {
		fake.newReturnsOnCall = make(map[int]struct {
			result1 []collector.CollectionSink
		})
	}
	fake.newReturnsOnCall[i] = struct {
		result1 []collector.CollectionSink
	}{result1}
}

func (fake *FakeCollectionSinkFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCollectionSinkFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ collector.CollectionSinkFactory = new(FakeCollectionSinkFactory)
