// Code generated by counterfeiter. DO NOT EDIT.
package brokerfakes

import (
	"lca/internal/pkg/broker"
	"sync"
)

type FakeSubscriberFactoryProvider struct {
	GetSubscriberFactoryStub        func() broker.SubscriberFactory
	getSubscriberFactoryMutex       sync.RWMutex
	getSubscriberFactoryArgsForCall []struct {
	}
	getSubscriberFactoryReturns struct {
		result1 broker.SubscriberFactory
	}
	getSubscriberFactoryReturnsOnCall map[int]struct {
		result1 broker.SubscriberFactory
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSubscriberFactoryProvider) GetSubscriberFactory() broker.SubscriberFactory {
	fake.getSubscriberFactoryMutex.Lock()
	ret, specificReturn := fake.getSubscriberFactoryReturnsOnCall[len(fake.getSubscriberFactoryArgsForCall)]
	fake.getSubscriberFactoryArgsForCall = append(fake.getSubscriberFactoryArgsForCall, struct {
	}{})
	stub := fake.GetSubscriberFactoryStub
	fakeReturns := fake.getSubscriberFactoryReturns
	fake.recordInvocation("GetSubscriberFactory", []interface{}{})
	fake.getSubscriberFactoryMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSubscriberFactoryProvider) GetSubscriberFactoryCallCount() int {
	fake.getSubscriberFactoryMutex.RLock()
	defer fake.getSubscriberFactoryMutex.RUnlock()
	return len(fake.getSubscriberFactoryArgsForCall)
}

func (fake *FakeSubscriberFactoryProvider) GetSubscriberFactoryCalls(stub func() broker.SubscriberFactory) {
	fake.getSubscriberFactoryMutex.Lock()
	defer fake.getSubscriberFactoryMutex.Unlock()
	fake.GetSubscriberFactoryStub = stub
}

func (fake *FakeSubscriberFactoryProvider) GetSubscriberFactoryReturns(result1 broker.SubscriberFactory) {
	fake.getSubscriberFactoryMutex.Lock()
	defer fake.getSubscriberFactoryMutex.Unlock()
	fake.GetSubscriberFactoryStub = nil
	fake.getSubscriberFactoryReturns = struct {
		result1 broker.SubscriberFactory
	}{result1}
}

func (fake *FakeSubscriberFactoryProvider) GetSubscriberFactoryReturnsOnCall(i int, result1 broker.SubscriberFactory) {
	fake.getSubscriberFactoryMutex.Lock()
	defer fake.getSubscriberFactoryMutex.Unlock()
	fake.GetSubscriberFactoryStub = nil
	if fake.getSubscriberFactoryReturnsOnCall == nil {
		fake.getSubscriberFactoryReturnsOnCall = make(map[int]struct {
			result1 broker.SubscriberFactory
		})
	}
	fake.getSubscriberFactoryReturnsOnCall[i] = struct {
		result1 broker.SubscriberFactory
	}{result1}
}

func (fake *FakeSubscriberFactoryProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSubscriberFactoryMutex.RLock()
	defer fake.getSubscriberFactoryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSubscriberFactoryProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ broker.SubscriberFactoryProvider = new(FakeSubscriberFactoryProvider)
