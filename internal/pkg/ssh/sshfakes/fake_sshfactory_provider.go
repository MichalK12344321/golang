// Code generated by counterfeiter. DO NOT EDIT.
package sshfakes

import (
	"lca/internal/pkg/ssh"
	"sync"
)

type FakeSSHFactoryProvider struct {
	GetSSHFactoryStub        func() func() ssh.SSH
	getSSHFactoryMutex       sync.RWMutex
	getSSHFactoryArgsForCall []struct {
	}
	getSSHFactoryReturns struct {
		result1 func() ssh.SSH
	}
	getSSHFactoryReturnsOnCall map[int]struct {
		result1 func() ssh.SSH
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSSHFactoryProvider) GetSSHFactory() func() ssh.SSH {
	fake.getSSHFactoryMutex.Lock()
	ret, specificReturn := fake.getSSHFactoryReturnsOnCall[len(fake.getSSHFactoryArgsForCall)]
	fake.getSSHFactoryArgsForCall = append(fake.getSSHFactoryArgsForCall, struct {
	}{})
	stub := fake.GetSSHFactoryStub
	fakeReturns := fake.getSSHFactoryReturns
	fake.recordInvocation("GetSSHFactory", []interface{}{})
	fake.getSSHFactoryMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSSHFactoryProvider) GetSSHFactoryCallCount() int {
	fake.getSSHFactoryMutex.RLock()
	defer fake.getSSHFactoryMutex.RUnlock()
	return len(fake.getSSHFactoryArgsForCall)
}

func (fake *FakeSSHFactoryProvider) GetSSHFactoryCalls(stub func() func() ssh.SSH) {
	fake.getSSHFactoryMutex.Lock()
	defer fake.getSSHFactoryMutex.Unlock()
	fake.GetSSHFactoryStub = stub
}

func (fake *FakeSSHFactoryProvider) GetSSHFactoryReturns(result1 func() ssh.SSH) {
	fake.getSSHFactoryMutex.Lock()
	defer fake.getSSHFactoryMutex.Unlock()
	fake.GetSSHFactoryStub = nil
	fake.getSSHFactoryReturns = struct {
		result1 func() ssh.SSH
	}{result1}
}

func (fake *FakeSSHFactoryProvider) GetSSHFactoryReturnsOnCall(i int, result1 func() ssh.SSH) {
	fake.getSSHFactoryMutex.Lock()
	defer fake.getSSHFactoryMutex.Unlock()
	fake.GetSSHFactoryStub = nil
	if fake.getSSHFactoryReturnsOnCall == nil {
		fake.getSSHFactoryReturnsOnCall = make(map[int]struct {
			result1 func() ssh.SSH
		})
	}
	fake.getSSHFactoryReturnsOnCall[i] = struct {
		result1 func() ssh.SSH
	}{result1}
}

func (fake *FakeSSHFactoryProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSSHFactoryMutex.RLock()
	defer fake.getSSHFactoryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSSHFactoryProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ssh.SSHFactoryProvider = new(FakeSSHFactoryProvider)
